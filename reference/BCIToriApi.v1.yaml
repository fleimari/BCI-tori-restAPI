openapi: 3.0.0
info:
  title: BCIToriApi
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /api/items:
    parameters: []
    get:
      summary: Get all items
      operationId: get-api-items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/item'
      description: Get all items
    post:
      summary: Create new item
      operationId: post-api-items
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
      description: Post a new item
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/simple_item'
        description: ''
  '/api/items/{id}':
    get:
      summary: Get item with ID
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  category:
                    type: string
                  location:
                    type: string
                  price:
                    type: number
                  date:
                    type: string
                  delivery-type:
                    type: string
                  telephone:
                    type: string
                  image:
                    type: object
                required:
                  - id
        '404':
          description: Item with the given ID was not found
      operationId: 'get-api-items-:id'
      description: Get item with given ID
    delete:
      summary: Delete item with ID
      operationId: 'delete-api-items-:id'
      responses:
        '200':
          description: OK
        '404':
          description: Item with the given ID was not found
      description: Delete item with given ID
    put:
      summary: Update item with ID
      operationId: 'put-api-items-:id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/item'
        '403':
          description: 'Forbidden: Username does not match!'
        '404':
          description: Item with the given ID was not found
      description: Update item with given ID and matching username.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/simple_item'
            examples:
              example-1:
                value:
                  username: string
                  title: string
                  description: string
                  category: string
                  location: string
                  price: 0
                  deliverytype: string
                  telephone: string
        description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: 'Item ID '
  /api/users:
    get:
      summary: Get all users
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      operationId: get-api-users
      description: Get all users
    post:
      summary: Create new user
      operationId: post-api-users
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '409':
          description: 'Conflict: Username is already taken!'
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
      description: Create new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 5
                password:
                  type: string
                  format: password
                email:
                  type: string
              required:
                - username
                - password
                - email
      parameters: []
  '/api/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: User id
    get:
      summary: Get user with ID
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: Not Found
      operationId: get-api-users-id
      description: Find user with given ID
    delete:
      summary: Delete user with ID
      operationId: delete-api-users-id
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      description: Delete user with given ID
  '/api/items/{searchtype}/{keyword}':
    get:
      summary: Search item with parameters
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/item'
        '404':
          description: Not Found
      operationId: 'get-api-items-:searchtype-:keyword'
      description: Search items with searchtype and a keyword. (/api/items/location/vaasa)
    parameters:
      - schema:
          type: string
        name: searchtype
        in: path
        required: true
        description: '"category/location/date"'
      - schema:
          type: string
        name: keyword
        in: path
        required: true
        description: '"guitar/dog/mersu"'
components:
  schemas:
    item:
      title: item
      type: object
      description: ''
      x-examples:
        example-1:
          id: '7'
          username: Rauno59
          title: Gibson guitar
          description: Selling nice Les Paul from 1985
          category: Hobby
          location: Oulu
          price: 1300
          date: '2019-08-24T14:15:22Z'
          delivery-type: Shipping or pickup
          telephone: '0401231231'
          image: {}
      properties:
        id:
          type: string
          description: Item ID will be generated at listing.
        username:
          type: string
          description: Item seller's username
        title:
          type: string
          description: Sell ad title
        description:
          type: string
          description: Item description
        category:
          type: string
          description: Item category
        location:
          type: string
          description: Item location
        price:
          type: number
          description: Selling price
        date:
          type: string
          description: Date when sale id was created
          format: date-time
        deliverytype:
          type: string
          description: Delivery shipping or pickup
        telephone:
          type: string
          description: Seller's telephone number
        image:
          type: object
          maxProperties: 4
      required:
        - id
        - username
        - title
        - description
        - category
        - location
        - price
        - date
        - deliverytype
        - telephone
    user:
      title: user
      type: object
      x-examples:
        example-1:
          id: 123123
          username: Rauno59
          password: pa$$word
          email: user@example.com
      properties:
        id:
          type: integer
        username:
          type: string
          minLength: 5
        password:
          type: string
          format: password
        email:
          type: string
          format: email
      required:
        - id
        - username
        - password
        - email
    simple_item:
      title: no_id_item
      type: object
      properties:
        username:
          type: string
          description: Item seller's username
        title:
          type: string
          description: Sell ad title
        description:
          type: string
          description: Item description
        category:
          type: string
          description: Item category
        location:
          type: string
          description: Item location
        price:
          type: number
          description: Selling price
        deliverytype:
          type: string
          description: Delivery type shipping or pickup
        telephone:
          type: string
          description: Seller's telephone number
      required:
        - username
        - title
        - description
        - category
        - location
        - price
        - deliverytype
        - telephone
      description: Item without ID and pictures
      x-examples:
        example-1:
          username: Kimmo22
          title: House
          description: Nice small apartment near Oulu
          category: House
          location: Haukipudas
          price: 37000
          deliverytype: pickup
          telephone: '04004040404'
  securitySchemes: {}
